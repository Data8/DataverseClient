# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

trigger:
- master

pool:
  name: 'Default'

variables:
  buildConfiguration: 'Release'

steps:
- checkout: self
  persistCredentials: true

- task: NuGetCommand@2
  displayName: Install GitVersion
  inputs:
    command: custom
    arguments: install GitVersion.CommandLine -Version 4.0.0 -OutputDirectory $(Build.BinariesDirectory)/tools -ExcludeVersion

- script: $(Build.BinariesDirectory)/tools/GitVersion.CommandLine/tools/GitVersion.exe /output buildserver /nofetch
  displayName: Determine Version
  
- task: DotNetCoreCLI@2
  displayName: Restore
  inputs:
    command: restore
    feedRestore: 'Data8Ltd'

- task: DotNetCoreCLI@2
  displayName: Build
  inputs:
    command: build
    projects: '**/*.csproj'
    arguments: '--configuration $(buildConfiguration) /p:Version=$(GitVersion.NuGetVersion)'

- task: DotNetCoreCLI@2
  displayName: Test
  inputs:
    command: test
    projects: '**/*Tests/*.csproj'
    arguments: '--configuration $(buildConfiguration) --no-build'

- task: DotNetCoreCLI@2
  displayName: Pack
  inputs:
    command: pack
    packagesToPack: '**/*.csproj;-:**/*Tests/*.csproj'
    nobuild: true
    versioningScheme: byEnvVar
    versionEnvVar: GITVERSION_NUGETVERSION

- task: DotNetCoreCLI@2
  displayName: Push
  inputs:
    command: custom
    custom: nuget
    arguments: >
      push $(Build.ArtifactStagingDirectory)\*.nupkg
      -s https://api.nuget.org/v3/index.json
      -k $(NuGetApiKey)
      --no-symbols true

- task: GitTag@5
  displayName: Label Source
  inputs:
    workingdir: '$(Build.SourcesDirectory)'
    tag: 'v$(GitVersion.NuGetVersion)'
  env:
    SYSTEM_ACCESSTOKEN: '$(System.AccessToken)'